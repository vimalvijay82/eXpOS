alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE + 1];

multipush(BP);

alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;

[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

alias loop R2;
alias newPID R3;

loop = currentPID + 1;

if(loop > 15) then
	loop = 1;
endif;

while(loop != currentPID) do
	
	if([PROCESS_TABLE + (loop * 16) + 4] == CREATED || [PROCESS_TABLE + (loop * 16) + 4] == READY) then
		newPID = loop;
		break;
	endif;
	
	loop = loop + 1;
	
	if (loop > 15) then
		if (currentPID == 0) then
			loop = 0;
			break;
		endif;
		loop = 1;
	endif;
endwhile;

if(loop == currentPID) then
	newPID = 0;
endif;

alias new_process_table R4;
new_process_table = PROCESS_TABLE + newPID * 16;

//Set back Kernel SP, PTBR , PTLR
SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];
[SYSTEM_STATUS_TABLE + 1] = newPID;

if([new_process_table + 4] == CREATED) then
    [new_process_table + 4] = RUNNING;
    SP = [new_process_table + 13];
    [new_process_table + 9] = 0;
    ireturn;
endif;

[new_process_table + 4] = RUNNING;
multipop(BP);
return;
