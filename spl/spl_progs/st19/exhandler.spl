
//Change mode flag
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = -1;

//switch to kernel stack
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

backup;
multipush(EIP);

alias userSP R0;
userSP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];

if(EC != 0 || userSP == [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 15] * 512-1) then
	print "---------";
	print "ERROR HALTING";
	
	if(EC == 1) then
		print "Illegal Instruction";
		print EIP;
	
	else
		if(EC == 2) then
			print "Illegal Memory";
			print EMA;
			
		else
			print "Illegal Arithmetic";
		endif;
	endif;
	//breakpoint;
	
	print "----------";
	
	multipush(R0);
	R1 = 3;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_1;
	multipop(R0);
	
	call MOD_5;
	
else
	alias loop R1;
	alias page_table R2;
	
	page_table = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 14];
	if(EPN >=4 && EPN <=7) then
		multipush(R0,R1,R2);
		R2 = [DISK_MAP_TABLE + ([SYSTEM_STATUS_TABLE+1]*10) + EPN];
		R1 = 5;
		call MOD_2;
		R3 = R0;
		multipop(R0,R1,R2);
		
		[page_table + EPN*2] = R3;
		[page_table + EPN*2 + 1] = "1100";
		
	endif;
	
	if(EPN >= 2 && EPN <= 3) then
		
		loop = 0;
		while(loop<2) do
			multipush(R1,R2);
			R1 = 1;
			call MOD_2;
			multipop(R1,R2);
			
			[page_table + 4 + (2*loop)] = R0;
			[page_table + 4 + (2*loop) + 1] = "1110";
			
			loop = loop + 1;
		endwhile;
	endif;
	
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 9] = 0;
	
	multipop(EIP);
	restore;
	
	SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
	SP = SP + 1;
	[[[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 14] + 2*((SP)/512)] * 512 + ((SP)%512)] = EIP;
	
	ireturn;
	
endif;
		
