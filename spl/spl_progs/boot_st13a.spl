//load timer interrupt
loadi(4,17);
loadi(5,18);

//load the library code
loadi(63,13);
loadi(64,14);

//load INT7 
loadi(16,29);
loadi(17,30);

//load the init program
loadi(65,7);
loadi(66,8);

//load INT 10 module from disk to memory
loadi(22,35);
loadi(23,36);

//load exception handler routine from disk to memory
loadi(2, 15);
loadi(3, 16);

//---------------------------------- INIT PROGRAM --------------------------

PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;

//Adding data to process table
[PROCESS_TABLE + 27] = 80; //Set the user area page physical address to 80
[PROCESS_TABLE + 17] = 1; // First process, so set the PID to 1
[PROCESS_TABLE + 20] = CREATED;
[PROCESS_TABLE + 29] = 8*512;
[PROCESS_TABLE + 28] = 0;
[PROCESS_TABLE + 30] = PTBR;
[PROCESS_TABLE + 31] = PTLR;



//setting up the logical pages to link to physical address

//library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

//Setting top of stack to the second word in header
[76*512] = [65*512 + 1];

return;
