//load timer interrupt
loadi(4,17);
loadi(5,18);

//load the library code
loadi(63,13);
loadi(64,14);

//load INT7 
loadi(16,29);
loadi(17,30);

//load the init program
loadi(65,7);
loadi(66,8);

//load INT9
loadi(20,33);
loadi(21,34);

//load INT 10 module from disk to memory
loadi(22,35);
loadi(23,36);

//load INT11
loadi(24,37);
loadi(25,38);

//load INT13
loadi(28,41);
loadi(29,42);

//load INT14
loadi(30,43);
loadi(31,44);

//load INT15
loadi(32,45);
loadi(33,46);

//load exception handler routine from disk to memory
loadi(2, 15);
loadi(3, 16);

//load module 5
loadi(50,63);
loadi(51,64);

//load module 0
loadi(40, 53);
loadi(41, 54);

//load module 4
loadi(48, 61);
loadi(49, 62);

//load MOD1
loadi(42,55);
loadi(43,56);

//load MOD2
loadi(44,57);
loadi(45,58);

//load INT 6
loadi(14, 27);
loadi(15, 28);

//load INT8
loadi(18,31);
loadi(19,32);

//load console_int
loadi(8, 21);
loadi(9, 22);

//load inode table
loadi(59,3);
loadi(60,4);

//load disk interrupt
loadi(6,19);
loadi(7,20);

//load disk free list
loadi(61,2);

//---------------------------------- INIT PROGRAM --------------------------

PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;

//Adding data to process table
[PROCESS_TABLE + 27] = 80; //Set the user area page physical address to 80
[PROCESS_TABLE + 17] = 1; // First process, so set the PID to 1
[PROCESS_TABLE + 20] = CREATED;
[PROCESS_TABLE + 29] = 8*512;
[PROCESS_TABLE + 28] = 0;
[PROCESS_TABLE + 30] = PTBR;
[PROCESS_TABLE + 31] = PTLR;



//setting up the logical pages to link to physical address

//library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

//Setting top of stack to the second word in header
[76*512] = [65*512 + 1];

[TERMINAL_STATUS_TABLE] = 0;

//process table entry as terminated

[PROCESS_TABLE + 36] = TERMINATED;
[PROCESS_TABLE + 52] = TERMINATED;
[PROCESS_TABLE + 68] = TERMINATED;
[PROCESS_TABLE + 84] = TERMINATED;
[PROCESS_TABLE + 100] = TERMINATED;
[PROCESS_TABLE + 116] = TERMINATED;
[PROCESS_TABLE + 132] = TERMINATED;
[PROCESS_TABLE + 148] = TERMINATED;
[PROCESS_TABLE + 164] = TERMINATED;
[PROCESS_TABLE + 180] = TERMINATED;
[PROCESS_TABLE + 196] = TERMINATED;
[PROCESS_TABLE + 212] = TERMINATED;
[PROCESS_TABLE + 228] = TERMINATED;
[PROCESS_TABLE + 244] = TERMINATED;

//---------------------------------------ST17-----------------------

alias loop R1;
loop = 0;

while(loop < 83) do
	[MEMORY_FREE_LIST + loop] = 1;
	loop = loop + 1;
endwhile;

while(loop < 128) do
	[MEMORY_FREE_LIST + loop] = 0;
	loop = loop + 1;
endwhile;

[SYSTEM_STATUS_TABLE + 3] = 0;
[SYSTEM_STATUS_TABLE + 2] = 45;
[DISK_STATUS_TABLE] = 0;

//-------------------------------------disk map table---------------------------------
[DISK_MAP_TABLE + 10] = -1;
[DISK_MAP_TABLE + 11] = -1;
[DISK_MAP_TABLE + 12] = -1;
[DISK_MAP_TABLE + 13] = -1;
[DISK_MAP_TABLE + 14] = 7;
[DISK_MAP_TABLE + 15] = 8;
[DISK_MAP_TABLE + 16] = -1;
[DISK_MAP_TABLE + 17] = -1;
[DISK_MAP_TABLE + 18] = -1;
[DISK_MAP_TABLE + 19] = -1;

//--------------------------pre process--------------------------------

loop = 0;
while(loop<16) do
	[(81*512)-16+loop] = -1;
	loop = loop + 1;
endwhile;
//----------------------------------------

//-------------------------------------semaphore_table-----------------------

loop = 0;
while(loop < MAX_SEM_COUNT) do
	[SEMAPHORE_TABLE + (loop*4)] = -1;
	[SEMAPHORE_TABLE + (loop*4) + 1] = 0;
	loop = loop + 1;
endwhile;

return;
