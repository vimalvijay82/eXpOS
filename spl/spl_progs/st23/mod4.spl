//print "MOD4";

alias functionNum R1;
alias currentPID R2;

//disk store
if(functionNum == 1) then
	alias pagenum R3;
	alias blocknum R4;
	
	//acquire disk
	multipush(R1,R2,R3,R4);
	R1 = 3;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_0;
	multipop(R1,R2,R3,R4);
	
	//set entries is disk status table
	[DISK_STATUS_TABLE + 1] = 1;
	[DISK_STATUS_TABLE + 2] = pagenum;
	[DISK_STATUS_TABLE + 3] = blocknum;
	
	//store
	store(pagenum,blocknum);
	
	//wait and call scheduler
	[PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;
	
	multipush(R1,R2,R3,R4);
	call MOD_5;
	multipop(R1,R2,R3,R4);
	
	return;
endif;


//disk load
if(functionNum == 2) then
	alias pageNum R3;
	alias diskNum R4;
	multipush(R1,R2,R3,R4);
	R1 = 3;
	//R2 = currentPID;
	call MOD_0;
	multipop(R1,R2,R3,R4);
	
	[DISK_STATUS_TABLE + 1] = 0;
	[DISK_STATUS_TABLE + 2] = pageNum;
	[DISK_STATUS_TABLE + 3] = diskNum;
	
	load(pageNum,diskNum);
	[PROCESS_TABLE + (currentPID*16) + 4] = WAIT_DISK;
	
	multipush(R1,R2,R3,R4);
	call MOD_5;
	multipop(R1,R2,R3,R4);
	return;
endif;
	
//terminal read
if(functionNum == 3) then
	multipush(R1,R2,R3);
	R1 = 8;
	R2 = currentPID;
	call MOD_0;
	multipop(R1,R2,R3);
	print R3;
	
	multipush(R1,R2,R3);
	R1 = 9;
	R2 = currentPID;
	call MOD_0;
	multipop(R1,R2,R3);
	return;
endif;

//terminal write	
if(functionNum == 4) then
	multipush(R1,R2,R3);
	R1 = 8;
	R2 = currentPID;
	call MOD_0;
	multipop(R1,R2,R3);
	
	read;
	
	[PROCESS_TABLE + (currentPID*16) + 4] = WAIT_TERMINAL;
	multipush(R1,R2,R3);
	call MOD_5;
	
	multipop(R1,R2,R3);
	alias physicalAddr R4;
	physicalAddr = [PTBR + 2 * ((R3)/512)] * 512 + (R3)%512;
	[physicalAddr] = [PROCESS_TABLE + (currentPID * 16) + 8];
	
	return;
else
	return;
endif;
