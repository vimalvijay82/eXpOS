//Process manager

alias functionNum R1;
alias currentPID R2;

//Get_PCB
if(functionNum == 1) then
	alias loop R3;
	alias flag R4;
	loop = 0;
	flag = 0;
	while(loop < 16) do
		if([PROCESS_TABLE + (loop*16) + 4] == TERMINATED) then
			flag = 1;
			break;
		endif;
		loop = loop + 1;
	endwhile;
	
	if(flag==1) then
		[PROCESS_TABLE + (loop*16) + 1] = loop;
		[PROCESS_TABLE + (loop*16) + 4] = ALLOCATED;
		[PROCESS_TABLE + (loop*16) + 14] = PAGE_TABLE_BASE + (loop*20);
		[PROCESS_TABLE + (loop*16) + 15] = 10;
		R0 = loop;
		return;
	else
		R0 = -1;
		return;
	endif;
endif;

//Free user area page
if(functionNum == 2) then
	alias userpage R3;
	userpage = [PROCESS_TABLE + (currentPID*16) + 11];
	
	//release semaphore and file
	alias loop R4;
	loop = 0;
	while(loop<8) do
		if([((userpage+1)*512) - 16 + 2*loop] == SEMAPHORE) then
			multipush(R1,R2,R3,R4);
			R1 = 7;
			R2 = currentPID;
			R3 = [((userpage+1)*512) - 16 + 2*loop + 1];
			call MOD_0;
			multipop(R1,R2,R3,R4);
		endif;
		if([((userpage+1)*512) - 16 + 2*loop] == FILE) then
			
			//close file
			multipush(R1,R2,R3,R4);
			R1 = 4;
			R2 = [((userpage+1)*512) - 16 + 2*loop + 1];
			call MOD_3;
			multipop(R1,R2,R3,R4);
		endif;
		[((userpage+1)*512) - 16 + 2*loop] = -1;
		loop = loop + 1;
	endwhile;
	
	//Release Page
	multipush(R1,R2,R3,R4);
	R1 = 2;
	R2 = userpage;
	call MOD_2;
	multipop(R1,R2,R3,R4);
	
	return;
endif;

//exit process
if(functionNum == 3) then
	//free page table
	multipush(R1,R2);
	R1 = 4;
	call MOD_1;
	multipop(R1,R2);
	
	//free user area page
	multipush(R1,R2);
	R1 = 2;
	call MOD_1;
	multipop(R1,R2);
	
	[PROCESS_TABLE + (currentPID*16) + 4] = TERMINATED;
	
	alias loop R3;
	loop = 0;
	if([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 9]!=9) then
		while(loop<16) do
			if([PROCESS_TABLE + (loop*16) + 4] == WAIT_PROCESS && [PROCESS_TABLE + (loop*16) + 5] == currentPID) then
				[PROCESS_TABLE + (loop*16) + 4] = READY;
			endif;
			if([PROCESS_TABLE + (loop*16) + 2] == currentPID) then
				[PROCESS_TABLE + (loop*16) + 2] = -1;
			endif;
			loop = loop + 1;
		endwhile;
	endif;
	
	return;
endif;

//free page table
if(functionNum == 4) then
	alias page_table R3;
	page_table = [PROCESS_TABLE + (currentPID*16) + 14];
	[page_table+0] = -1;
	[page_table+1] = "0000";
	[page_table+2] = -1;
	[page_table+3] = "0000";
	
	alias loop R4;
	loop = 4;
	
	while(loop<20) do
		if([page_table + loop]!= -1) then

			multipush(R1,R2,R3,R4);
			R1 = 2;
			R2 = [page_table + loop];
			call MOD_2;
			multipop(R1,R2,R3,R4);
		
			[page_table+loop] = -1;
			[page_table+loop+1] = "0000";
		endif;
		loop = loop + 2;
	endwhile;
	
	alias dmt R5;
	dmt = DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10;
	
	loop = 2;
	while(loop<4) do
		if([dmt + loop] != -1) then
			multipush(R0,R1,R2,R3,R4,R5);
			R1 = 4;
			R2 = [dmt + loop];
			call MOD_2;
			multipop(R0,R1,R2,R3,R4,R5);
			
		endif;
		loop = loop + 1;
	endwhile;
	
	loop = 8;
	while(loop<10) do
		if([dmt + loop] != -1) then
			multipush(R0,R1,R2,R3,R4,R5);
			R1 = 4;
			R2 = [dmt + loop];
			call MOD_2;
			multipop(R0,R1,R2,R3,R4,R5);
			
		endif;
		loop = loop + 1;
	endwhile;
	
	[dmt + 0] = -1;
	[dmt + 1] = -1;
	[dmt + 2] = -1;
	[dmt + 3] = -1;
	[dmt + 4] = -1;
	[dmt + 5] = -1;
	[dmt + 6] = -1;
	[dmt + 7] = -1;
	[dmt + 8] = -1;
	[dmt + 9] = -1;
	
	return;
endif;
		
//kill All
if(functionNum == 5) then
	
	alias loop R3;
	loop = 0;
	// get inode for all valid files in inode table
	while(loop<MAX_FILE_NUM) do
		if([INODE_TABLE + (loop*16)+1] != -1) then
			//Acquire Inode
			multipush(R1,R2,R3);
			R1 = 4;
			R2 = [SYSTEM_STATUS_TABLE + 1];
			R3 = loop;
			call MOD_0;
			multipop(R1,R2,R3);
			
		endif;
		loop = loop + 1;
	endwhile;
	
	//for all process except idle and init
	loop = 2;
	while(loop<MAX_PROC_NUM) do
		if(loop != currentPID && [PROCESS_TABLE + (loop*16) + 4] != TERMINATED) then
			//call exit process for all process except current one
			multipush(R1,R2,R3);
			R1 = 3;
			R2 = loop;
			call MOD_1;
			multipop(R1,R2,R3);
		endif;
		
		loop = loop + 1;
	endwhile;
	
	loop = 0;
	// get inode for all valid files in inode table
	while(loop<MAX_FILE_NUM) do
		if([INODE_TABLE + (loop*16)] != -1) then
			//Release Inode
			multipush(R1,R2,R3);
			R1 = 5;
			R2 = [SYSTEM_STATUS_TABLE + 1];
			R3 = loop;
			call MOD_0;
			multipop(R1,R2,R3);
			
		endif;
		loop = loop + 1;
	endwhile;
	
	return;
endif;
