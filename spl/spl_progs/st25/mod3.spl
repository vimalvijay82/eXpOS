//File Manager
//print "MOD3";

alias functionNum R1;

//Buffered read and buffered_write
if(functionNum == 2 || functionNum == 1) then

	alias blocknum R12;
	alias offset R13;
	alias addr R14;
	
	blocknum = R2;
	offset = R3;
	addr = R4;
	
	alias buffer R5;
	buffer = blocknum%4;
	
	//call acquire buffer
	multipush(R1,R2,R3,R4,R5,R12,R13,R14);
	R1 = 1;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = buffer;
	call MOD_0;
	multipop(R1,R2,R3,R4,R5,R12,R13,R14);
	
	//buffer contains another block
	if([BUFFER_TABLE + (buffer*4)] != blocknum) then
		//block is dirty
		if([BUFFER_TABLE + (buffer*4) + 1] == 1) then
			
			//disk store
			multipush(R1,R2,R3,R4,R5,R12,R13,R14);
			R1 = 1;
			R2 = [SYSTEM_STATUS_TABLE + 1];
			R3 = 71+buffer;
			R4 = [BUFFER_TABLE + (buffer*4)];
			call MOD_4;
			multipop(R1,R2,R3,R4,R5,R12,R13,R14);
	
			//mark buffer as clean
			[BUFFER_TABLE + (buffer*4) + 1] = 0;
		endif;
		
		//load block into buffer by disk load
		multipush(R1,R2,R3,R4,R5,R12,R13,R14);
		R1 = 2;
		R2 = [SYSTEM_STATUS_TABLE + 1];
		R3 = 71+buffer;
		R4 = blocknum;
		call MOD_4;
		multipop(R1,R2,R3,R4,R5,R12,R13,R14);
		
		[BUFFER_TABLE + (buffer*4)] = blocknum;
	endif;
	
	if(functionNum == 2) then
	
		[addr] = [(71+buffer)*512 + offset];
	endif;
	
	if(functionNum == 1) then
		//write contents
		[(71+buffer)*512 + offset] = addr;
		
		//mark as diry
		[BUFFER_TABLE + (buffer*4) + 1] = 1;
	endif;
	
	//release buffer
	multipush(R1,R2,R3,R4,R5,R12,R13,R14);
	R1 = 2;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = buffer;
	call MOD_0;
	multipop(R1,R2,R3,R4,R5,R12,R13,R14);
	
	return;
endif;
	
//Open
if(functionNum == 3) then
	
	alias filename R2;
	
	alias loop R3;
	alias index R4;
	loop = 0;
	index = -1;
	
	//find inode table index
	while(loop < MAX_FILE_NUM) do
		if([INODE_TABLE + (loop*16) + 1] == filename) then
			index = loop;
			break;
		endif;
		loop = loop + 1;
	endwhile;
	
	
	//file not found
	if(index == -1) then
		R0 = -1;
		return;
	endif;
	
	//Acquire inode
	multipush(R1,R2,R3,R4);
	R1 = 4;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = index;
	call MOD_0;
	multipop(R1,R2,R3,R4);
	
	//locking failed
	if(R0 == -1) then
		return;
	endif;
	
	//if file is exec
	if([INODE_TABLE + (index*16)] == EXEC || [INODE_TABLE + (16*index) +1]!=filename) then
		
		//release inode
		multipush(R1,R2,R3,R4);
		R1 = 5;
		R2 = [SYSTEM_STATUS_TABLE + 1];
		R3 = index;
		call MOD_0;
		multipop(R1,R2,R3,R4);
		
		R0 = -1;
		return;
	endif;
	
	//find free open file entry
	alias ft_index R5;
	ft_index = -1;
	loop = 0;
	while(loop < MAX_OPENFILE_NUM) do
		if([OPEN_FILE_TABLE + (loop*4)] == -1) then
			ft_index = loop;
			break;
		endif;
		loop = loop + 1;
	endwhile;
	
	//no free file table entry
	if(ft_index == -1) then
		multipush(R1,R2,R3,R4,R5);
		R1 = 5;
		R2 = [SYSTEM_STATUS_TABLE + 1];
		R3 = index;
		call MOD_0;
		multipop(R1,R2,R3,R4,R5);
		
		R0 = -2;
		return;
	endif;
	
	//set open file table and file status table
	if(filename == "root") then
		[OPEN_FILE_TABLE + (ft_index*4)] = INODE_ROOT;
	else
		if([FILE_STATUS_TABLE + (index*4) + 1] == -1) then
			[FILE_STATUS_TABLE + (index*4) + 1] = 1;
		else
			[FILE_STATUS_TABLE + (index*4) + 1] = [FILE_STATUS_TABLE + (index*4) + 1] + 1;
		endif;
		
		[OPEN_FILE_TABLE + (ft_index*4)] = index;
	endif;
	
	//set open instance and lseek
	[OPEN_FILE_TABLE + (ft_index*4) + 1] = 1;
	[OPEN_FILE_TABLE + (ft_index*4) + 2] = 0;
	
	//release inode
	multipush(R1,R2,R3,R4,R5);
	R1 = 5;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = index;
	call MOD_0;
	multipop(R1,R2,R3,R4,R5);
	
	R0 = ft_index;
	return;
	
endif;

//close
if(functionNum == 4) then
	
	alias ft_index R2;
	
	alias index R3;
	index = [OPEN_FILE_TABLE + (ft_index*4)];
	
	//decrement open instance
	[OPEN_FILE_TABLE + (ft_index*4) + 1] = [OPEN_FILE_TABLE + (ft_index*4) + 1] - 1;
	
	//open instance becomes 0
	if([OPEN_FILE_TABLE + (ft_index*4) + 1] == 0) then
		[OPEN_FILE_TABLE + (ft_index*4)] = -1;
		[OPEN_FILE_TABLE + (ft_index*4) + 1] = -1;
		[OPEN_FILE_TABLE + (ft_index*4) + 2] = -1;
		[OPEN_FILE_TABLE + (ft_index*4) + 3] = -1;
		
		//if file is not "root:
		if(index!=INODE_ROOT) then
			[FILE_STATUS_TABLE + (4*index) + 1] = [FILE_STATUS_TABLE + (4*index) + 1] - 1;
		endif;
		if([FILE_STATUS_TABLE + (4*index) + 1] == 0) then
			[FILE_STATUS_TABLE + (4*index) + 1] = -1;
		endif;
	endif;
	
	return;
	
endif;
		
